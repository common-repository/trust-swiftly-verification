<?php

namespace TrustswiftlyVerification\Settings;

/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 * https://gist.github.com/hlashbrooke/9267467
 */

use TrustSwiftly\TrustSwiftly;
use TrustswiftlyVerification\Api\Ipn;
use TrustswiftlyVerification\WooCommerce\ReturnHandler;
use TrustswiftlyVerification\WooCommerce\Verification;
use WP_Term;
use Exception;
use TrustswiftlyVerification\TrustVerifyPlugin;

class Settings 
{
    protected static $defaultMethod = 'link';

    protected static $defaultBtnImg = 'pill-grey-ts.svg';

    protected $settings;

    protected $optionName = 'trustswiftly_verification';

    protected $title = 'Trust Swiftly Identity Verification';

    protected $fields = [];

    public function __construct() 
    {
        add_action('admin_menu', [$this, 'tsSettingsAddPluginPage']);
        add_action('admin_init', [$this, 'tsSettingsPageInit']);
    }

    public function tsSettingsAddPluginPage() {
        add_menu_page(
            $this->title, // page_title
            $this->title, // menu_title
            'manage_options', // capability
            'ts-settings', // menu_slug
            [$this, 'tsSettingsAddAdminPage'], // function
            'dashicons-shield-alt', // icon_url
            81 // position
       );
    }

    public function tsSettingsAddAdminPage() {
        $this->initFields();

        $this->settings = get_option($this->optionName); 
        
        $apiOptions = [
            [
                'option' => ts_get_option('api_key'),
                'label' => __('API Key', 'trustswiftly-verification'),
            ],
            [
                'option' => ts_get_option('api_secret'),
                'label' => __('API Secret', 'trustswiftly-verification'),
            ],
            [
                'option' => ts_get_option('embed_key'),
                'label' => __('Embed Key', 'trustswiftly-verification'),
            ],
            [
                'option' => ts_get_option('base_url'),
                'label' => __('Base URL', 'trustswiftly-verification'),
            ]
        ];

        $requiredOptions = [
            [
                'option' => ts_get_option('template_id', Settings::getDefaultTemplateId()),
                'label'  => __('Template Id', 'trustswiftly-verification')
            ],
            [
                'option' => ts_get_option('webhook_secret'),
                'label' => __('Webhook Secret', 'trustswiftly-verification'),
            ]
        ];

        $missingOptions = [];
        $missingRequiredApiOptions = [];
        foreach ($apiOptions as $option) {
            if(empty($option['option'])) {
                $missingRequiredApiOptions[] = $option['label'];
            }
        }
        $unavailableTemplates = false;
        foreach ($requiredOptions as $option) {
            if ($option['option']==-1) {
                $unavailableTemplates=true;
            }elseif(empty($option['option'])) {
                $missingOptions[] = $option['label'];
            }
        }


        echo ts_render('admin-settings-page.php', [
            'title' => $this->title,
            'missingOptions' => $missingOptions,
            'missingRequiredApiOptions' => $missingRequiredApiOptions,
            'unavailableTemplates' => $unavailableTemplates,
            'isApiConnected' => $this->getApiStatus()
        ]);
    }

    public function getEnabledGateways() {
        $gateways = WC()->payment_gateways->get_available_payment_gateways();
        $enabled_gateways = [];

        if( $gateways ) {
            foreach( $gateways as $gateway ) {
                    $enabled_gateways[$gateway->id] = $gateway->method_title;
            }
        }
        return $enabled_gateways;
    }

    public function tsSettingsPageInit() {
        register_setting(
            'ts_settings_option_group', // option_group
            $this->optionName, // option_name
            [$this, 'sanitize']// sanitize_callback
        );
    }

    public function pluginSettingsSectionInfo($args)
    {
        if ($args['id']=='ts_setting_default') {
            $routes = [
                [
                    'url' => Ipn::listenOn(),
                    'label' => __('IPN Listener URL:', 'trustswiftly-verifications')
                ],
                [
                    'url' => ReturnHandler::listenOn(),
                    'label' => __('Completion Redirect URL:', 'trustswiftly-verifications')
                ],
            ];

            foreach ($routes as $route) {
                $label = ts_array_get($route, 'label');
                $url = ts_array_get($route, 'url');

                printf('<p><strong>%s</strong> <code>%s</code></p>', $label, $url);
            }
        }
    }
    
    public function sanitize($input) {
        $sanitaryValues = [];
        $sanitizeValues = [
            'api_key',
            'api_secret',
            'embed_key',
            'base_url',
            'webhook_secret',
            'verify_on',
            'send_verify_link',
            'product_categories',
            'applicable_payment_methods',
            'compare_price_mode',
            'compare_price',
            'template_id',
            'btn_img',
            'verification_method',
            'allow_guest_checkout_verify',
            'custom_css'
        ];

        foreach ($sanitizeValues as $field) {
            if (is_array($input[$field])) {
                $sanitaryValues[$field] = array_map('esc_attr', $input[$field]);
            }
            else {
                $sanitaryValues[$field] = sanitize_text_field($input[$field]);
            }
        }

        return $sanitaryValues;
    }

    public function displayField($field) 
    {
        $optionName = $this->optionName . '[' . $field['id'] . ']';
        $option = ts_array_get($this->settings, $field['id'], '');
        $addon = ts_array_get($field, 'addon');
        $html = '';

        $data = '';

        if (isset($field['default'])) {
            $data = $field['default'];
            if ($option) {
                $data = $option;
            }
        }

        switch ($field['type']) {
            case 'group':
                foreach ($field['fields'] as $f) {
                    $html .= $this->displayField($f);
                }
            break;
            case 'text':
            case 'url':
            case 'password':
                $html .= '<input id="' . esc_attr($field['id']) . '" type="' . $field['type'] . '" name="' . esc_attr($optionName) . '" placeholder="' . esc_attr(ts_array_get($field, 'placeholder', '')) . '" value="' . $data . '"/>' . "\n";
                if (ts_array_get($field, 'toggle') == 1) {
                    $html .= '<a href="#" class="js-toggle-password-visibility">' . __('Show', 'trustswifly-verification') . '</a>';
                }
            break;

            case 'number':
                $html .= '<input step="' . esc_attr(ts_array_get($field, 'step')) . '" min="' . esc_attr(ts_array_get($field, 'min')) . '"  max="' . esc_attr(ts_array_get($field, 'max')) . '" id="' . esc_attr($field['id']) . '" type="' . $field['type'] . '" name="' . esc_attr($optionName) . '" placeholder="' . esc_attr(ts_array_get($field, 'placeholder', '')) . '" value="' . $data . '"/>' . "\n";
            break;

            case 'text_secret':
                $html .= '<input id="' . esc_attr($field['id']) . '" type="text" name="' . esc_attr($optionName) . '" placeholder="' . esc_attr(ts_array_get($field, 'placeholder', '')) . '" value=""/>' . "\n";
            break;

            case 'textarea':
                $html .= '<textarea id="' . esc_attr($field['id']) . '" rows="5" cols="50" name="' . esc_attr($optionName) . '" placeholder="' . esc_attr(ts_array_get($field, 'placeholder', '')) . '">' . $data . '</textarea><br/>'. "\n";
            break;

            case 'checkbox':
                $checked = '';
                if ($option && 'on' == $option){
                    $checked = 'checked="checked"';
                }
                $html .= '<input id="' . esc_attr($field['id']) . '" type="' . $field['type'] . '" name="' . esc_attr($optionName) . '" ' . $checked . '/>' . "\n";
            break;
            case 'toggle':
                $checked = '';
                if ($option && true == $option){
                    $checked = 'checked="checked"';
                }
                $html .= '<label class="ts-switch"><input id="' . esc_attr($field['id']) . '" type="checkbox" name="' . esc_attr($optionName) . '" ' . $checked . '/><span class="ts-slider ts-round"></span></label>' . "\n";
                break;

            case 'checkbox_multi':
                foreach($field['options'] as $k => $v) {
                    $checked = false;
                    if (in_array($k, (array)$data)) {
                        $checked = true;
                    }
                    $html .= '<p><label for="' . esc_attr($field['id'] . '_' . $k) . '"><input type="checkbox" ' . checked($checked, true, false) . ' name="' . esc_attr($optionName) . '[]" value="' . esc_attr($k) . '" id="' . esc_attr($field['id'] . '_' . $k) . '" /> ' . $v . '</label></p>';
                }
            break;

            case 'radio':
                foreach($field['options'] as $k => $v) {
                    $checked = false;
                    if ($k == $data) {
                        $checked = true;
                    }
                    $html .= '<label for="' . esc_attr($field['id'] . '_' . $k) . '"><input type="radio" ' . checked($checked, true, false) . ' name="' . esc_attr($optionName) . '" value="' . esc_attr($k) . '" id="' . esc_attr($field['id'] . '_' . $k) . '" /> ' . $v . '</label> ';
                }
            break;

            case 'select':
                $isMultiple = ts_array_get($field, 'multiple', 0);
                $multiple = $isMultiple ? " multiple " : '';

                if ($isMultiple) {
                    $optionName .= '[]';
                }

                $html .= '<select' . $multiple . ' name="' . esc_attr($optionName) . '" id="' . esc_attr($field['id']) . '">';
                foreach($field['options'] as $k => $v) {
                    $selected = $isMultiple ? in_array($k, (array)$data) : $k == $data;

                    $html .= '<option ' . selected($selected, true, false) . ' value="' . esc_attr($k) . '">' . $v . '</option>';
                }
                $html .= '</select> ';
            break;

            case 'select-img':
                $isMultiple = ts_array_get($field, 'multiple', 0);
                $multiple = $isMultiple ? " multiple " : '';

                if ($isMultiple) {
                    $optionName .= '[]';
                }

                $html .= '<select' . $multiple . ' name="' . esc_attr($optionName) . '" id="' . esc_attr($field['id']) . '">';
                $baseUrl = rtrim(ts_array_get($field, 'base_url'), '/');

                foreach($field['options'] as $k => $v) {
                    $selected = $isMultiple ? in_array($k, (array)$data) : $k == $data;
                    $img = "{$baseUrl}/{$k}";

                    $html .= '<option data-img="' . $img . '" ' . selected($selected, true, false) . ' value="' . esc_attr($k) . '">' . $v . '</option>';
                }
                $html .= '</select> ';
            break;

            case 'select_multi':
                $html .= '<select name="' . esc_attr($optionName) . '[]" id="' . esc_attr($field['id']) . '" multiple="multiple">';
                foreach($field['options'] as $k => $v) {
                    $selected = false;
                    if (in_array($k, (array)$data)) {
                        $selected = true;
                    }
                    $html .= '<option ' . selected($selected, true, false) . ' value="' . esc_attr($k) . '" />' . $v . '</label> ';
                }
                $html .= '</select> ';
            break;

            case 'image':
                $image_thumb = '';
                if ($data) {
                    $image_thumb = wp_get_attachment_thumb_url($data);
                }
                $html .= '<img id="' . $optionName . '_preview" class="image_preview" src="' . $image_thumb . '" /><br/>' . "\n";
                $html .= '<input id="' . $optionName . '_button" type="button" data-uploader_title="' . __('Upload an image' , 'plugin_textdomain') . '" data-uploader_button_text="' . __('Use image' , 'plugin_textdomain') . '" class="image_upload_button button" value="'. __('Upload new image' , 'plugin_textdomain') . '" />' . "\n";
                $html .= '<input id="' . $optionName . '_delete" type="button" class="image_delete_button button" value="'. __('Remove image' , 'plugin_textdomain') . '" />' . "\n";
                $html .= '<input id="' . $optionName . '" class="image_data_field" type="hidden" name="' . $optionName . '" value="' . $data . '"/><br/>' . "\n";
            break;

            case 'color':
                ?><div class="color-picker" style="position:relative;">
                    <input type="text" name="<?php esc_attr_e($optionName); ?>" class="color" value="<?php esc_attr_e($data); ?>" />
                    <div style="position:absolute;background:#FFF;z-index:99;border-radius:100%;" class="colorpicker"></div>
                </div>
                <?php
            break;

        }

        switch ($field['type']) {

            case 'checkbox_multi':
            case 'radio':
            case 'select_multi':
                $html .= '<br/><p class="description">' . ts_array_get($field, 'description', '') . '</p>';
            break;

            default:
                $html .= '<label for="' . esc_attr($field['id']) . '"><p class="description">' . ts_array_get($field, 'description', '') . '</p></label>' . "\n";
            break;
        }

        if ($addon) {
            $html = "<div class='ts-input-group-addon'><span class='ts-input-addon'>{$addon}</span>{$html}</div>";
        }

        return $html;
    }

    protected function getTemplateOptions()
    {
        return static::getTemplates();
    }

    public static function getTemplates()
    {
        $apiKey = ts_get_option('api_key');
        $baseUrl = ts_get_option('base_url');
        $apiSecret = ts_get_option('api_secret');
        $embedKey = ts_get_option('embed_key');

        $options = [
            // '' => '-- Select --'
        ];
        
        if (! $apiKey || ! $baseUrl || ! $apiSecret || ! $embedKey) {
            return $options;
        }

        $trustObject = new TrustSwiftly($apiKey, $baseUrl, $apiSecret, $embedKey);
        try {
            $templates = $trustObject->templateClient()->getVerificationTemplates();
        } 
        catch (Exception $e) {
            $templates = [];
        }
        if (!$templates || !is_array($templates)){
            return $options;
        }
        return array_reduce($templates, function($carry, $t) {
            if (is_array($t) && isset($t['name'])) {
                $carry[$t['name']] = $t['template_name'];
                return $carry;
            }else{
                return [];
            }

        }, $options);
    }

    public static function getDefaultTemplateId()
    {
        $templates = static::getTemplates();

        if (empty($templates)) {
            return -1;
        }

        return ts_array_get(
            array_keys($templates),
            0
        );
    }

    public static function defaultBtnImg()
    {
        return TrustVerifyPlugin::pluginUrl() . 'assets/img/' . static::$defaultBtnImg;
    }

    protected function getWCProductCategories()
    {
        $terms = get_terms([
            'taxonomy' => 'product_cat',
            'orderby' => 'name',
            'order' => 'ASC',
            'hide_empty' => false
        ]);

        return array_reduce($terms, function(array $carry, WP_Term $term) {
            $carry[$term->term_id] = $term->name;

            return $carry;
        }, []);
    }

    protected function getApiStatus()
    {
        try {
            $apiKey = ts_get_option('api_key');
            $baseUrl = ts_get_option('base_url');
            $apiSecret = ts_get_option('api_secret');
            $embedKey = ts_get_option('embed_key');

            if (empty($apiKey) || empty($baseUrl) || empty($apiSecret) || empty($embedKey)) {
                return false;
            }
    
            $validationResponse = TrustSwiftly::validateCredentials($apiKey, $baseUrl, $apiSecret, $embedKey);

            $status = is_array($validationResponse) && ts_array_get($validationResponse, 'status') == 'success' ? 1 : 0;

            return $status;

        } catch (Exception $e){
            return false;
        } 
    }

    public static function defaultVerificationMethod()
    {
        return static::$defaultMethod;
    }

    protected function initFields() 
    {
        $enabled_gateways = $this->getEnabledGateways();

        $productCategories = $this->getWCProductCategories();
        $this->fields['default'] = [
            'title' => 'Configure the plugin. '.($this->getApiStatus()?'':'Sign up at <a href="https://app.trustswiftly.com/create" target="_blank">Trust Swiftly</a> for your keys.'),
            'fields' => [
                [
                    'id'            => 'api_key',
                    'label'         => __('API Key' , 'trustswiftly-verification'),
                    'description'   =>  __('Find your API Key, Secret, and Embed Key in the Developer section of Trust Swiftly', 'trustswiftly-verification'),
                    'type'          => 'password',
                    'toggle'        => 1,
                    'default'       => '',
                    'required'      => 'true',
                    // 'placeholder'    => __('Placeholder text', 'trustswiftly-verification')
                ],
                [
                    'id'            => 'api_secret',
                    'label'         => __('API Secret' , 'trustswiftly-verification'),
                    'type'          => 'password',
                    'toggle'        => 1,
                    'default'       => '',
                    'required'      => 'true',
                ],
                [
                    'id'            => 'embed_key',
                    'label'         => __('Embed Key' , 'trustswiftly-verification'),
                    'type'          => 'text',
                    'default'       => '',
                    'required'      => 'true',
                    
                ],
                [
                    'id'            => 'base_url',
                    'label'         => __('Base URL' , 'trustswiftly-verification'),
                    'type'          => 'url',
                    'default'       => '',
                    'required'      => 'true',
                    'description'   =>  __('Enter in your Trust Swiftly site URL i.e https://example.trustswiftly.com', 'trustswiftly-verification')
                ],
                [
                    'id'            => 'webhook_secret',
                    'label'         => __('Webhook Secret' , 'trustswiftly-verification'),
                    'type'          => 'text',
                    'required'      => 'true',
                    'default'       => '',
                ],
                [
                    'id'            => 'verification_method',
                    'label'         => __('Verification Method' , 'trustswiftly-verification'),
                    'type'          => 'select',
                    'default'       => '',
                    'options'       =>  [
                        'link'  =>  __('Link', 'trustswiftly-verification'),
                        //'modal'  =>  __('Modal', 'trustswiftly-verification'),
                    ],
                    'description'   =>  __('Select a method to display Trust Swiftly. Currently the button popup is only supported.', 'trustswiftly-verification')
                ],
                [
                    'id'            => 'template_id',
                    'label'         => __('Verification Template' , 'trustswiftly-verification'),
                    'type'          => 'select',
                    'default'       => '',
                    'options'       =>  $this->getTemplateOptions(),
                    'description'   =>  __('Select a verification method defined such as ID and Selfie. A Verification Template should be set on Trust Swiftly.', 'trustswiftly-verification')
                ]
                // [
                //     'id'            => 'compare_price_mode',
                //     'label'          => __('Compare Cart/Order Price Mode' , 'trustswiftly-verification'),
                //     'type'           => 'select',
                //     'options'       =>  [
                //         ''          =>  __('-- Select --', 'trustswiftly-verification'),
                //         'less_than' => __('Less Than', 'trustswiftly-verification'),
                //         'more_than' => __('More Than', 'trustswiftly-verification'),
                //     ],
                //     'default'        => '',
                //     'description'   => __('Apply only if total cart/order sum is greater than or less than', 'trustswiftly-verifications')
                // ],
                // [
                //     'id'            => 'compare_price',
                //     'label'          => __('Compare Price' , 'trustswiftly-verification'),
                //     'type'           => 'number',
                //     'default'        => '',
                //     'min'           =>  0,
                //     'step'          =>  0.01,
                //     'description'   => __('Apply only if total cart/order price is greater than or less than this price', 'trustswiftly-verifications')
                // ],
            ]
        ];
        $this->fields['advanced'] = [
            'title' => 'Additional Plugin Settings',
            'fields' => [
                [
                    'id'            => 'verify_on',
                    'label'         => __('When To Verify' , 'trustswiftly-verification'),
                    'description'   => __('Select when customers should verify their identity.', 'trustswiftly-verifications'),
                    'type'          => 'select',
                    'options'       =>  [
                        Verification::VERIFY_BEFORE_CHECKOUT => __('Before Checkout', 'trustswiftly-verifications'),
                        Verification::VERIFY_AFTER_CHECKOUT => __('After Checkout', 'trustswiftly-verifications'),
                    ],
                    'default'       => Verification::VERIFY_BEFORE_CHECKOUT,
                ],
                [
                    'id'            => 'send_verify_link',
                    'label'         => __('Send Verify Link To Email' , 'trustswiftly-verification'),
                    'description'   => __('Send Verification Link to Customers Email.', 'trustswiftly-verifications'),
                    'type'          => 'toggle',
                    'default'       => false
                ],
                [
                    'id'            => 'allow_guest_checkout_verify',
                    'label'         => __('Verify Checkout for Guests' , 'trustswiftly-verification'),
                    'description'   => __('Trigger verification for users at guest checkout', 'trustswiftly-verifications'),
                    'type'          => 'toggle',
                    'default'       => false
                ],
                [
                    'id'            => 'product_categories',
                    'label'         => __('Product Categories' , 'trustswiftly-verification'),
                    'type'          => 'select',
                    'options'       =>  $productCategories,
                    'default'       => '',
                    'css_class'     =>  'js-select2',
                    'multiple'      =>  true,
                    'description'   => __('Apply only if any product in the cart belongs to one of these categories', 'trustswiftly-verifications')
                ],
                [
                    'id'            => 'applicable_payment_methods',
                    'label'         => __('Applicable Payment Methods' , 'trustswiftly-verification'),
                    'type'          => 'select',
                    'options'       =>  $enabled_gateways,
                    'default'       => '',
                    'css_class'     =>  'js-select2',
                    'multiple'      =>  true,
                    'description'   => __('Apply only if want to enable for specific payment methods.', 'trustswiftly-verifications')
                ],
                [
                    'id'            => 'complare_price_group',
                    'label'         => __('Compare Cart/Order Price Mode' , 'trustswiftly-verification'),
                    'type'          => 'group',
                    'css_class'     =>  'ts-input-group',
                    'description'   => __('Apply verifications only if total cart/order sum is greater than or less than', 'trustswiftly-verifications'),
                    'fields'        => [
                        [
                            'id'            => 'compare_price_mode',
                            'label'         => __('Compare Cart/Order Price Mode' , 'trustswiftly-verification'),
                            'type'          => 'select',
                            'options'       =>  [
                                ''          =>  __('-- Select --', 'trustswiftly-verification'),
                                'less_than' => __('Less Than', 'trustswiftly-verification'),
                                'more_than' => __('More Than', 'trustswiftly-verification'),
                            ],
                            'default'       => '',
                            // 'description'   => __('Apply only if total cart/order sum is greater than or less than', 'trustswiftly-verifications')
                        ],
                        [
                            'id'            => 'compare_price',
                            'label'         => __('Compare Price' , 'trustswiftly-verification'),
                            'type'          => 'number',
                            'default'       => '',
                            'min'           =>  0,
                            'step'          =>  0.01,
                            'addon'         => get_woocommerce_currency_symbol(),
                            // 'description'   => __('Apply only if total cart/order price is greater than or less than this price', 'trustswiftly-verifications')
                        ],
                    ]
                ],
                [
                    'id'            => 'btn_img',
                    'label'         => __('Button Image' , 'trustswiftly-verification'),
                    'type'          => 'select-img',
                    'css_class'     => 'js-select2-img select-img',
                    'base_url'      =>  TrustVerifyPlugin::pluginUrl() . 'assets/img/',
                    'options'       =>  [
                        'pill-grey-ts.svg' => __('Pill Grey', 'trustswiftly-verification'),
                        'pill-outlined-ts.svg' => __('Pill Outlined', 'trustswiftly-verification'),
                        'pill-solid-color-ts.svg' => __('Pill Solid', 'trustswiftly-verification'),
                        'rectangle-grey-ts.svg' => __('Rectangle Grey', 'trustswiftly-verification'),
                        'rectangle-outlined-ts.svg' => __('Rectangle Outlined', 'trustswiftly-verification'),
                        'rectangle-solid-color-ts.svg' => __('Rectangle Solid', 'trustswiftly-verification'),
                    ],
                    'default'       => '',
                    'description'   => __('Select the button style of Trust Swiftly to display on your checkout page or order complete.', 'trustswiftly-verifications')
                ],
                [
                    'id'            => 'custom_css',
                    'label'         => __('Custom Css' , 'trustswiftly-verification'),
                    'description'   => __('Custom Css for the plguin.', 'trustswiftly-verifications'),
                    'type'          => 'textarea',
                    'default'       => ''
                ]
                // [
                //     'id'            => 'compare_price_mode',
                //     'label'          => __('Compare Cart/Order Price Mode' , 'trustswiftly-verification'),
                //     'type'           => 'select',
                //     'options'       =>  [
                //         ''          =>  __('-- Select --', 'trustswiftly-verification'),
                //         'less_than' => __('Less Than', 'trustswiftly-verification'),
                //         'more_than' => __('More Than', 'trustswiftly-verification'),
                //     ],
                //     'default'        => '',
                //     'description'   => __('Apply only if total cart/order sum is greater than or less than', 'trustswiftly-verifications')
                // ],
                // [
                //     'id'            => 'compare_price',
                //     'label'          => __('Compare Price' , 'trustswiftly-verification'),
                //     'type'           => 'number',
                //     'default'        => '',
                //     'min'           =>  0,
                //     'step'          =>  0.01,
                //     'description'   => __('Apply only if total cart/order price is greater than or less than this price', 'trustswiftly-verifications')
                // ],
            ]
        ];
        foreach ($this->fields as $section => $config) {
            add_settings_section(
                'ts_setting_' . $section, // id
                $config['title'], // title
                [$this, 'pluginSettingsSectionInfo'], // callback
                'ts-settings' // page
            );
    
            foreach ($config['fields'] as $field) {
                add_settings_field(
                    $field['id'], // id
                    $field['label'], // title
                    function() use ($field) {
                        $cssClass = ts_array_get($field, 'css_class');

                        printf(
                            "<div class='%s'>%s</div>",
                            $cssClass,
                            $this->displayField($field)
                        );
                    }, // callback
                    'ts-settings', // page
                    'ts_setting_' . $section // section
               );
            }
        }
    }
}